if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; 
then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

byteize_unicode_icon() {
  var="$(echo -n $1 | od -An -tx1)"
  printf '\\x%s' ${var} | echo -e " $1 "
}

prompt_git() {
  local repo_status='';
  local branch_name='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;
      if [ "$(git status 2> /dev/null | tail -n1)" == "nothing to commit, working directory clean" ]; then
        repo_status='✔ ';
      fi

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        repo_status+='+';
      fi;
      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        repo_status+='!';
      fi;
      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        repo_status+='?';
      fi;
      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        repo_status+='$';
      fi;
    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just print current branch.
    branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      (git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/"))";

    [ -n "${repo_status}" ] && repo_status=" [${repo_status}]";

    echo -e "${1}${branch_name}${2}${repo_status}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  BOLD=$(tput bold);
  RESET=$(tput sgr0);
  BLACK=$(tput setaf 0);
  BLUE=$(tput setaf 33);
  CYAN=$(tput setaf 37);
  GREEN=$(tput setaf 64);
  ORANGE=$(tput setaf 166);
  PURPLE=$(tput setaf 125);
  RED=$(tput setaf 124);
  VIOLET=$(tput setaf 61);
  WHITE=$(tput setaf 15);
  YELLOW=$(tput setaf 136);
else
  BOLD='';
  RESET="\e[0m";
  BLACK="\e[1;30m";
  BLUE="\e[1;34m";
  CYAN="\e[1;36m";
  GREEN="\e[1;32m";
  ORANGE="\e[1;33m";
  PURPLE="\e[1;35m";
  RED="\e[1;31m";
  VIOLET="\e[1;35m";
  WHITE="\e[1;37m";
  YELLOW="\e[1;33m";
fi;

PROMPT_DIRTRIM=2
# If id command returns zero, you’ve root access.
if [ $(id -u) -eq 0 ];
then
  userStyle="${RED}";
else
  userStyle="${GREEN}";
fi;

# Username@hostname 💻
PS1="\[${YELLOW}\]-> \[${userStyle}\]\u\[${WHITE}\]$(byteize_unicode_icon 🌍) \[${YELLOW}\]\h\n"
# Append working directory 🗁  = bytes(\xF0\x9F\x97\x81)
PS1+='->\[${WHITE}\]$(byteize_unicode_icon 📂) \[${CYAN}\]$(p=${PWD/#"$HOME"/\~};((${#p}>30)) && echo "${p::10}…${p:(-14)}" || echo "\w")'
# Append git repo current branch if git directory ⎇  = bytes(e2 8e 87 20)
PS1+="\$(prompt_git \"\[${WHITE}\]$(byteize_unicode_icon ⎇ ) \[${VIOLET}\]\" \"\[${BLUE}\]\")\n"
# Append prompt sign
[[ -s "${HOME}/.iterm2_shell_integration.bash" ]] && PS1=$PS1'\[$(iterm2_prompt_mark)\]'
PS1=$PS1'\[${WHITE}\]\$ '

export PS1;
